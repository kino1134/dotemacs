;; -*- coding:utf-8 -*-

(defun my-key-combo-fun ()
  (local-set-key (kbd "\"")
                 (lambda (arg)
                   (interactive "P")
                   (self-insert-command (prefix-numeric-value arg))
                   (let ((props (text-properties-at (point))))
                     (when (and (null (memq 'font-lock-string-face props))
                          (null (memq 'font-lock-comment-face props)))
                       (self-insert-command (prefix-numeric-value arg))
                       (backward-char 1)
                       ))))
  (local-set-key (kbd "(")
                 (lambda (arg)
                   (interactive "P")
                   (self-insert-command (prefix-numeric-value arg))
                   (let ((props (text-properties-at (point))))
                     (when (and (null (memq 'font-lock-string-face props))
                          (null (memq 'font-lock-comment-face props)))
                       (insert ")")
                       (backward-char 1)
                       ))))
  (local-set-key (kbd ")")
                 (lambda (arg)
                   (interactive "P")
                   (if (looking-at (string last-command-event))
                       (forward-char 1)
                     (self-insert-command (prefix-numeric-value arg)))))
  (local-set-key (kbd "[")
                 (lambda (arg)
                   (interactive "P")
                   (self-insert-command (prefix-numeric-value arg))
                   (let ((props (text-properties-at (point))))
                     (when (and (null (memq 'font-lock-string-face props))
                          (null (memq 'font-lock-comment-face props)))
                       (insert "]")
                       (backward-char 1)
                       ))))
  (local-set-key (kbd "]")
                 (lambda (arg)
                   (interactive "P")
                   (if (looking-at (string last-command-event))
                       (forward-char 1)
                     (self-insert-command (prefix-numeric-value arg)))))
  )
(add-hook 'emacs-lisp-mode-hook 'my-key-combo-fun)
(add-hook 'lisp-interaction-mode-hook 'my-key-combo-fun)
(add-hook 'lisp-mode-hook 'my-key-combo-fun)
(add-hook 'ielm-mode-hook 'my-key-combo-fun)
(add-hook 'scheme-mode-hook 'my-key-combo-fun)
